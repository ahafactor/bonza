<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<channel name="menu-item-state">
		<any>
			<prop name="up">
				<string/>
			</prop>
			<prop name="down">
				<string/>
			</prop>
		</any>
	</channel>
	<channel name="menu-item-activate">
		
	</channel>
	<channel name="menu-item-id">
		
	</channel>
	<common>
		<unwrap>core</unwrap>
		<unwrap>core.string</unwrap>
	</common>
	<applet name="expandable" id="id">
		<!-- an expandable panel -->
		<state name="state">
			<all>
				<prop name="title">
					<string/>
				</prop>
				<prop name="appname">
					<string/>
				</prop>
				<prop name="arg">
					<string/>
				</prop>
				<prop name="mode">
					<any>
						<prop name="collapsed" />
						<prop name="expanded" />
					</any>
				</prop>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table class="expandable">
						<tr>
							<th>
								[%nbsp%]<span class="glyphicon glyphicon-[%icon%] [%class%]"></span>[%nbsp%]
							</th>
							<th class="panel-title">
								[%state.title%]
							</th>
						</tr>
						<tr>
							<td></td>
							<td>
								<div class="[%core.appletclass(state.appname)%]" id="[%id%]-content" data-arg="[%state.arg%]" style="display: [%display%];">[%state.appname%]</div>
							</td>
						</tr>
					</table>
				</text>
				<where>
					<any>
						<all>
							<is>state.mode.collapsed</is>
							<def var="display">
								"none"
							</def>
							<def var="icon">
								"expand"
							</def>
							<def var="class">
								"expand-icon"
							</def>
						</all>
						<all>
							<is>state.mode.expanded</is>
							<def var="display">
								"block"
							</def>
							<def var="icon">
								"collapse-down"
							</def>
							<def var="class">
								"collapse-icon"
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<!-- argument format: <title>;<applet-name>;<applet-argument> -->
			<state>
				<calc>
					{title: trim(title), appname: trim(appname), arg: trim(rest2), mode: {expanded:}}
					<where>
						<all>
							<def var="pos1">
								indexOf({str: arg, substr: ";"})
							</def>
							<def var="title">
								substr({str: arg, from: 0, to: {pos: pos1}})
							</def>
							<def var="rest1">
								substr({str: arg, from: pos1 + 1, to: {end:}})
							</def>
							<def var="pos2">
								indexOf({str: rest1, substr: ";"})
							</def>
							<def var="appname">
								substr({str: rest1, from: 0, to : {pos: pos2}})
							</def>
							<def var="rest2">
								substr({str: rest1, from: pos2 + 1, to: {end:}})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<prop name="toggle" />
			</input>
			<state>
				<calc>
					<alter>
						state
						<set prop="mode">new</set>
					</alter>
					<where>
						<any>
							<all>
								<is>state.mode.collapsed</is>
								<def var="new">
									{expanded:}
								</def>
							</all>
							<all>
								<is>state.mode.expanded</is>
								<def var="new">
									{collapsed:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<after>
				<redraw/>
			</after>
		</respond>
		<events>
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="main-layout-1" id="id">
		<state name="state">
			<all>
				<prop name="logo">
					<string/>
				</prop>
				<prop name="menuapplet">
					<string/>
				</prop>
				<prop name="pageapplet">
					<string/>
				</prop>
				<prop name="loginapplet">
					<string/>
				</prop>
				<prop name="creator">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<div class="container-fluid">
					<div class="row">
						<div class="col-sm-5">
							<a href="#">
								<image src="[%state.logo%]" width="400" height="160"/>
							</a>
						</div>
						<div class="col-sm-7">
							<br/>
							<div class="[%appletclass(state.menuapplet)%]" id="main-menu">Main menu here</div>
						</div>
					</div>
					<div class="row">
						<div class="col-sm-12">
							<div class="container">
								<div class="[%appletclass(state.pageapplet)%]" id="page">Page content here</div>
							</div>
						</div>
					</div>
					<div class="row">
						<div class="col-sm-12">
							<hr/>
							<span class="creator">Created by [%state.creator%]</span>
							<span class="powered">Powered by  <a href="fabsitetools.com">Fab Site Tools</a></span>
						</div>
					</div>
				</div>
			</text>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{logo: args[0], menuapplet: args[1], pageapplet: args[2], loginapplet: args[3], creator: args[4]}
					<where>
						<def var="args">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
		</init>
	</applet>
	<applet name="menu-bar" id="id">
		<output>
			<any>
				<prop name="up">
					<string/>
				</prop>
				<prop name="down">
					<string/>
				</prop>
			</any>
		</output>
		<state name="state">
			<all>
				<prop name="items">
					<array>
						<all>
							<prop name="id">
								<string/>
							</prop>
							<prop name="text">
								<string/>
							</prop>
						</all>
					</array>
				</prop>
				<prop name="active">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table class="menu-bar">
						<tr>
							[%join({parts: items, sep: ''})%]
						</tr>
					</table>
				</text>
				<where>
					<def var="items">
						<array>
							<size>state.items#</size>
							<item index="i">
								<calc>
									<text>
										<td>
											<div id="[%id%]-item-[%i + 1%]" class="[%appletclass('menu-item')%]" data-arg="[%active%][%state.items[i].text%]:[%state.items[i].id%]">[%state.items[i].text%]</div>
										</td>
									</text>
									<where>
										<any>
											<all>
												<is>i = 0</is>
												<def var="active">
													"!"
												</def>
											</all>
											<def var="active">
												""
											</def>
										</any>
									</where>
								</calc>
							</item>
						</array>
					</def>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{items: items, active: items[0].id}
					<where>
						<def var="items">
							<array>
								<size>itemsidtext#</size>
								<item index="i">
									<calc>
										{id: itemid, text: text}
										<where>
											<all>
												<def var="pos">
													indexOf({str: itemsidtext[i], substr: ":"})
												</def>
												<def var="text">
													substr({str: itemsidtext[i], from: 0, to: {pos: pos}})
												</def>
												<def var="itemid">
													substr({str: itemsidtext[i], from: pos + 1, to: {end:}})
												</def>
											</all>
										</where>
									</calc>
								</item>
							</array>
						</def>
					</where>
					<where>
						<def var="itemsidtext">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
			<actions>
				<send channel="menu-item-state">{down: state.items[0].id}</send>
			</actions>
		</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<before>
				<calc>
					<send channel="menu-item-state">{up: state.active}</send>
					<where>
						<is>
							<find>
								<in>state.items</in>
								<item name="item"><is>item.id = input</is></item>
							</find>
						</is>
					</where>
				</calc>
			</before>
			<state>
				<calc>
					{items: state.items, active: input}
					<where>
						<is>
							<find>
								<in>state.items</in>
								<item name="item"><is>item.id = input</is></item>
							</find>
						</is>
					</where>
				</calc>
			</state>
			<after>
				<send channel="menu-item-state">{down: input}</send>
			</after>
		</respond>
		<accept data="data">
			<from channel="menu-item-activate">data</from>
		</accept>
	</applet>
	<applet name="page-menu" id="id">
		<state name="state">
			<all>
				<prop name="items">
					<array>
						<all>
							<prop name="id">
								<string/>
							</prop>
							<prop name="text">
								<string/>
							</prop>
						</all>
					</array>
				</prop>
				<prop name="active">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table class="menu-list">
						[%join({parts: items, sep: ''})%]
					</table>
				</text>
				<where>
					<def var="items">
						<array>
							<size>state.items#</size>
							<item index="i">
								<calc>
									<text>
										<tr>
											<td>
												<div id="[%id%]-item-[%i + 1%]" class="[%appletclass('menu-item')%]" data-arg="[%active%][%state.items[i].text%]:[%state.items[i].id%]">[%state.items[i].text%]</div>
											</td>
										</tr>
									</text>
									<where>
										<any>
											<all>
												<is>i = 0</is>
												<def var="active">
													"!"
												</def>
											</all>
											<def var="active">
												""
											</def>
										</any>
									</where>
								</calc>
							</item>
						</array>
					</def>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{items: items, active: items[0].id}
					<where>
						<def var="items">
							<array>
								<size>itemsidtext#</size>
								<item index="i">
									<calc>
										{id: id, text: text}
										<where>
											<all>
												<def var="pos">
													indexOf({str: itemsidtext[i], substr: ":"})
												</def>
												<def var="text">
													substr({str: itemsidtext[i], from: 0, to: {pos: pos}})
												</def>
												<def var="id">
													substr({str: itemsidtext[i], from: pos + 1, to: {end:}})
												</def>
											</all>
										</where>
									</calc>
								</item>
							</array>
						</def>
					</where>
					<where>
						<def var="itemsidtext">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<before>
				<calc>
					<send channel="menu-item-state">{up: state.active}</send>
					<where>
						<is>
							<find>
								<in>state.items</in>
								<item name="item"><is>item.id = input</is></item>
							</find>
						</is>
					</where>
				</calc>
			</before>
			<state>
				<calc>
					{items: state.items, active: input}
					<where>
						<is>
							<find>
								<in>state.items</in>
								<item name="item"><is>item.id = input</is></item>
							</find>
						</is>
					</where>
				</calc>
			</state>
			<after>
				<send channel="menu-item-state">{down: input}</send>
			</after>
		</respond>
		<accept data="data">
			<from channel="menu-item-activate">data</from>
		</accept>
	</applet>
	<applet name="menu-item" id="id">
		<output>
			<string/>
		</output>
		<state name="state">
			<all>
				<prop name="text">
					<string/>
				</prop>
				<prop name="id">
					<string/>
				</prop>
				<any>
					<prop name="up" />
					<prop name="down" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<div class="[%class%]">[%state.text%]</div>
				</text>
				<where>
					<any>
						<all>
							<is>state.up</is>
							<def var="class">
								"menu-item-inactive"
							</def>
						</all>
						<all>
							<is>state.down</is>
							<def var="class">
								"menu-item-active"
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					state
					<where>
						<any>
							<all>
								<is>charAt({str: text, index: 0}) = "!"</is>
								<def var="state">
									{id: id, text: substr({str: text, from: 1, to: {end:}}), down:}
								</def>
							</all>
							<def var="state">
								{id: id, text: text, up:}
							</def>
						</any>
					</where>
					<where>
						<all>
							<def var="pos">
								indexOf({str: arg, substr: ":"})
							</def>
							<def var="text">
								substr({str: arg, from: 0, to: {pos: pos}})
							</def>
							<def var="id">
								substr({str: arg, from: pos + 1, to: {end:}})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="do" />
					<prop name="up" />
					<prop name="down" />
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.up</is>
								<def var="newstate">
									{id: state.id, text: state.text, up:}
								</def>
							</all>
							<all>
								<is>input.down</is>
								<def var="newstate">
									{id: state.id, text: state.text, down:}
								</def>
							</all>
							<def var="newstate">
								state
							</def>
						</any>
					</where>
				</calc>
			</state>
			<after>
				<calc>
					action
					<where>
						<any>
							<all>
								<is>input.do</is>
								<def var="action">
									<send channel="menu-item-activate">state.id</send>
								</def>
							</all>
							<def var="action">
								<redraw/>
							</def>
						</any>
					</where>
				</calc>
			</after>
		</respond>
		<events>
			<click>
				<calc>
					{do:}
					<where>
						<is>state.up</is>
					</where>
				</calc>
			</click>
		</events>
		<accept data="data">
			<from channel="menu-item-state">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>data.up = state.id</is>
								<def var="input">
									{up:}
								</def>
							</all>
							<all>
								<is>data.down = state.id</is>
								<def var="input">
									{down:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</from>
			<!-- <from channel="page-menu">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>data.up = state.id</is>
								<def var="input">
									{up:}
								</def>
							</all>
							<all>
								<is>data.down = state.id</is>
								<def var="input">
									{down:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</from> -->
		</accept>
	</applet>
	<applet name="page-layout-1" id="id">
		<state name="state">
			<all>
				<prop name="menuapplet">
					<string/>
				</prop>
				<prop name="pageapplet">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<div class="container-fluid">
					<div class="row">
						<div class="col-sm-2">
							<div class="[%appletclass(state.menuapplet)%]" id="[%id%]-menu">[%nbsp%]</div>
						</div>
						<div class="col-sm-10">
							<div class="[%appletclass(state.pageapplet)%]" id="[%id%]-content">[%nbsp%]</div>
						</div>
					</div>
				</div>
			</text>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{menuapplet: args[0], pageapplet: args[1]}
					<where>
						<def var="args">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
		</init>
	</applet>
</library>