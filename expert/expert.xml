<library>
	<channel name="code-editor">
		<all>
			<prop name="line">
				<integer/>
			</prop>
			<prop name="ch">
				<integer/>
			</prop>
		</all>
	</channel>
	<!-- <import library="../essentials.xml"> -->
	<!-- 	<applet name="main-layout-1"/>
		<applet name="menu-bar">
			<any>
				<prop name="up">
					<string/>
				</prop>
				<prop name="down">
					<string/>
				</prop>
			</any>
		</applet>	
		<applet name="page-menu">
			<any>
				<prop name="up">
					<string/>
				</prop>
				<prop name="down">
					<string/>
				</prop>
			</any>
		</applet>	
		<applet name="menu-item">
			<string/>
		</applet>		
		<applet name="page-layout-1"/> -->
		<!-- <applet name="expandable"/> -->
		<!-- </import> -->
		<typedef name="XMLnode">
			<any>
				<prop name="childNodes">
					<array>
						<dynamic/>
					</array>
				</prop>
				<prop name="nodeName">
					<string/>
				</prop>
				<prop name="nodeType">
					<integer/>
				</prop>
				<prop name="nodeValue">
					<string/>
				</prop>
			</any>
		</typedef>
		<common>
			<unwrap>core</unwrap>
			<unwrap>string</unwrap>
			<unwrap>format</unwrap>
<!-- 		<def var="nodeerrors">
			<func>
				<arg name="node">
					<type name="XMLnode"/>
				</arg>
				<return>
					<calc>
						result
						<where>
							<any>
								<all>
									<is>list# = 0</is>
									<def var="result">
										""
									</def>
								</all>
								<all>
									<def var="rows">
										<array>
											<size>list#</size>
											<item index="i">
												<calc>
													<text>
														<li>child.nodeValue</li>
													</text>
													<where>
														<def var="child">
															<cast>list[i]<to><type name="XMLnode"/></to></cast>
														</def>
													</where>
												</calc>
											</item>
										</array>
									</def>
									<def var="result">
										<text>
											<ul class="error">
												join({parts: rows, sep: ""})
											</ul>
										</text>
									</def>
								</all>
							</any>
						</where>
						<where>
							<def var="list">
								<select>
									<in>node.childNodes</in>
									<item name="item">
										<all>
											<def var="child">
												<cast>item<to><type name="XMLnode"/></to></cast>
											</def>
											<is>child.nodeName = "error"</is>
										</all>
									</item>
								</select>
							</def>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<def var="nodecomments">
			<func>
				<arg name="node">
					<type name="XMLnode"/>
				</arg>
				<return>
					<calc>
						result
						<where>
							<any>
								<all>
									<is>list# = 0</is>
									<def var="result">
										""
									</def>
								</all>
								<all>
									<def var="rows">
										<array>
											<size>list#</size>
											<item index="i">
												<calc>
													<text>
														<tr>
															<td><span class="glyphicon glyphicon-info-sign expert-comment"></span></td>
															<td><span class="expert-comment">child.nodeValue</span></td>
														</tr>
													</text>
													<where>
														<def var="child">
															<cast>list[i]<to><type name="XMLnode"/></to></cast>
														</def>
													</where>
												</calc>
											</item>
										</array>
									</def>
									<def var="result">
										<text>
											<table>
												join({parts: rows, sep: ""})
											</table>
										</text>
									</def>
								</all>
							</any>
						</where>
						<where>
							<def var="list">
								<select>
									<in>node.childNodes</in>
									<item name="item">
										<all>
											<def var="child">
												<cast>item<to><type name="XMLnode"/></to></cast>
											</def>
											<is>child.nodeType = 8</is>
										</all>
									</item>
								</select>
							</def>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<def var="nodecomments">
			<func>
				<arg name="node">
					<type name="XMLnode"/>
				</arg>
				<return>
					<calc>
						result
						<where>
							<any>
								<all>
									<is>list# = 0</is>
									<def var="result">
										""
									</def>
								</all>
								<all>
									<def var="rows">
										<array>
											<size>list#</size>
											<item index="i">
												<calc>
													<text>
														<div class="appletclass('expandable')" id="[%id%]-child-[%i + 1%]" data-arg="[%child.nodeName%];node;[%child.nodeName%]">[%child.nodeName%]</div>
													</text>
													<where>
														<def var="child">
															<cast>list[i]<to><type name="XMLnode"/></to></cast>
														</def>
													</where>
												</calc>
											</item>
										</array>
									</def>
									<def var="result">
										<text>
											<p>
												join({parts: rows, sep: ""})
											</p>
										</text>
									</def>
								</all>
							</any>
						</where>
						<where>
							<def var="list">
								<select>
									<in>node.childNodes</in>
									<item name="item">
										<all>
											<def var="child">
												<cast>item<to><type name="XMLnode"/></to></cast>
											</def>
											<not>
												<any>
													<is>child.nodeType = 8</is>
													<is>child.nodeName = "error"</is>
												</any>
											</not>
										</all>
									</item>
								</select>
							</def>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<def var="nodeattributes">
			<func>
				<arg name="node">
					<type name="XMLnode"/>
				</arg>
				<return>
					<calc>
						result
						<where>
							<any>
								<all>
									<is>keys# = 0</is>
									<def var="result">
										""
									</def>
								</all>
								<all>
									<def var="rows">
										<array>
											<size>keys#</size>
											<item index="i">
												<text>
													<tr>
														<td>[%keys[i]%]=[%attr@(keys[i])%]</td>
													</tr>
												</text>
											</item>
										</array>
									</def>
									<def var="result">
										<text>
											<table>
												join({parts: rows, sep: ""})
											</table>
										</text>
									</def>
								</all>
							</any>
						</where>
						<where>
							<all>
								<def var="attr">
									xml.getAttributes(node)
								</def>
								<def var="keys">
									<keys>attr</keys>
								</def>
							</all>
						</where>
					</calc>
				</return>
			</func>
		</def>
	-->	</common>
	<!-- <applet name="node" id="id">
		<state name="state">
			<all>
				<prop name="parent">
					<string/>
				</prop>
				<prop name="data">
					<any>
						<prop name="node">
							<type name="XMLnode"/>
						</prop>
						<prop name="none" />
					</any>
				</prop>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.data.node</is>
							<def var="content">
								<text>
									<table>
										<tr><td>[%nodeerrors(state.data.node)%]</td></tr>
										<tr><td>[%nodeattributes(state.data.node)%]</td></tr>
										<tr><td>[%nodecomments(state.data.node)%]</td></tr>
										<tr><td>[%nodechildren(state.data.node)%]</td></tr>
									</table>
								</text>
							</def>
						</all>
						<def var="content">
							""
						</def>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				{parent: arg, data: {none:}}
			</state>
		</init>
		<respond>
			<input name="input">

			</input>
			<before>

			</before>
			<state>

			</state>
			<after>

			</after>
		</respond>
	</applet> -->
	<applet name="editor-toolbar" id="id">
		<content>
			<text>
				<span class="[%appletclass('add-item')%]" id="[%id%]-add-item" data-tooltip="Insert an item">.</span>
				<span class="[%appletclass('search')%]" id="[%id%]-search" data-tooltip="Search text">.</span>
				<span class="[%appletclass('settings')%]" id="[%id%]-settings" data-tooltip="Settings">.</span>
				<span class="right">
					<span class="[%appletclass('size-down')%]" id="[%id%]-size-down" data-tooltip="Decrease height">.</span>
					<span class="[%appletclass('size-up')%]" id="[%id%]-size-up" data-tooltip="Increase height">.</span>
				</span>
			</text>			
		</content>
	</applet>
	<applet name="add-item" id="id">
		<content>
			<text>
				<span class="popup-head">
					<span class="glyphicon glyphicon-plus menu-item-inactive"> </span>
					
					<span class="popup-body">
						<div class="popup-menu-item" onclick="expert_editor.insert('applet\n');">applet</div>
						<div class="popup-menu-item">text</div>
						<div class="popup-menu-item">formula</div>
					</span>
				</span>
			</text>			
		</content>
	</applet>
	<applet name="search" id="id">
		<content>
			<text>
				<span class="popup-head">
					<span class="glyphicon glyphicon-search menu-item-inactive"> </span>
					
				</span>
			</text>			
		</content>
	</applet>
	<applet name="settings" id="id">
		<content>
			<text>
				<span class="popup-head">
					<span class="glyphicon glyphicon-cog menu-item-inactive"> </span>
					
				</span>
			</text>			
		</content>
	</applet>
	<applet name="size-up" id="id">
		<content>
			<text>
				<span class="popup-head">
					<span class="glyphicon glyphicon-chevron-up menu-item-inactive" onclick="expert_editor.sizeUp();"> </span>
				</span>
			</text>			
		</content>
	</applet>
	<applet name="size-down" id="id">
		<content>
			<text>
				<span class="popup-head">
					<span class="glyphicon glyphicon-chevron-down menu-item-inactive" onclick="expert_editor.sizeDown();"> </span>
				</span>
			</text>			
		</content>
	</applet>
	<applet name="cursor-status" id="id">
		<state name="state">
			<all>
				<prop name="line">
					<integer/>
				</prop>
				<prop name="ch">
					<integer/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				ln: [%state.line + 1%] ch: [%state.ch + 1%][%nbsp%]
			</text>
		</content>
		<init arg="arg">
			<state>
				{ line: 0, ch: 0 }
			</state>
		</init>
		<respond>
			<input name="input">
				<all>
					<prop name="line">
						<integer/>
					</prop>
					<prop name="ch">
						<integer/>
					</prop>
				</all>
			</input>
			<state>
				input				
			</state>
			<after>
				<redraw/>
			</after>
		</respond>
		<accept data="data">
			<from channel="code-editor">data</from>
		</accept>
	</applet>
</library>