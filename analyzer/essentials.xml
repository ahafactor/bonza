<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<common>
		<unwrap>core.string</unwrap>
	</common>
	<applet name="expandable" id="id">
		<!-- an expandable panel -->
		<state name="state">
			<all>
				<prop name="title">
					<string/>
				</prop>
				<prop name="appname">
					<string/>
				</prop>
				<prop name="arg">
					<string/>
				</prop>
				<any>
					<prop name="collapsed" />
					<prop name="expanded" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.collapsed</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<div class="expand-icon">+</div>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
									</table>
								</text>
							</def>
						</all>
						<all>
							<is>state.expanded</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<div class="collapse-icon">-</div>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
										<tr>
											<td></td>
											<td>
												<div class="[%core.appletclass(state.appname)%]" id="[%id%]-content" data-arg="[%state.arg%]">.</div>
											</td>
										</tr>
									</table>
								</text>
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<!-- argument format: <title>;<applet-name>;<applet-argument> -->
			<state>
				<calc>
					{title: trim(title), appname: trim(appname), arg: trim(rest2), collapsed:}
					<where>
						<all>
							<def var="pos1">
								indexOf({str: arg, substr: ";"})
							</def>
							<def var="title">
								substr({str: arg, start: 0, end: pos1})
							</def>
							<def var="rest1">
								substr({str: arg, start: pos1 + 1, end: length(arg)})
							</def>
							<def var="pos2">
								indexOf({str: rest1, substr: ";"})
							</def>
							<def var="appname">
								substr({str: rest1, start: 0, end: pos2})
							</def>
							<def var="rest2">
								substr({str: rest1, start: pos2 + 1, end: length(rest1)})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<prop name="toggle" />
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>state.collapsed</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, arg: state.arg, expanded:}
								</def>
							</all>
							<all>
								<is>state.expanded</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, arg: state.arg, collapsed:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<redraw/>
			</actions>
		</respond>
		<events>
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="main-layout-1" id="id">
		<state name="state">
			<all>
				<prop name="title">
					<string/>
				</prop>
				<prop name="subtitle">
					<string/>
				</prop>
				<prop name="logo">
					<string/>
				</prop>
				<prop name="menuapplet">
					<string/>
				</prop>
				<prop name="pageapplet">
					<string/>
				</prop>
				<prop name="loginapplet">
					<string/>
				</prop>
				<prop name="creator">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<table class="main-page-table">
					<tr>
						<td rowspan="2">
							<image src="[%state.logo%]"/>
						</td>
						<td>
							<div class="main-title">[%state.title%]</div>
						</td>
						<td rowspan="2">
							<div class="appletclass('[%state.menuapplet%]')" id="main-menu">Initializing...</div>
						</td>
						<td>
							<div class="appletclass('[%state.loginapplet%]')" id="quick-login">Initializing...</div>
						</td>
					</tr>
					<tr>
						<td></td>
						<td>
							<span class="main-subtitle">[%state.subtitle%]</span>
						</td>
						<td></td>
						<td></td>
					</tr>
					<tr>
						<td colspan="4">
							<div class="appletclass('[%state.pageapplet%]')" id="page">Initializing...</div>
						</td>
					</tr>
					<tr>
						<td colspan="4">
							<hr/>
							<span class="creator">Created by [%state.creator%]</span>
							<span class="powered">Powered by FabSite Tools <a href="www.fabsitetools.com">www.fabsitetools.com</a></span>
						</td>
					</tr>
				</table>
			</text>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{title: args[0], subtitle: args[1], logo: args[2], menuapplet: args[3], pageapplet: args[4], loginapplet: args[5], creator: args[6]}
					<where>
						<def var="args">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
		</init>
	</applet>
	<applet name="main-menu" id="id">
		<output>
			<any>
				<prop name="up">
					<string/>
				</prop>
				<prop name="down">
					<string/>
				</prop>
			</any>
		</output>
		<state name="state">
			<all>
				<prop name="items">
					<array>
						<string/>
					</array>
				</prop>
				<prop name="active">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table>
						<tr>
							[%join({parts: items, sep: '<td class="menu-separator">|</td>'})%]
						</tr>
					</table>
				</text>
				<where>
					<def var="items">
						<array>
							<size>state.items#</size>
							<item index="i">
								<text>
									<td>
										<div id="[%id%]-item-[%i + 1%]" class="[%appletclass('menu-item')%]" data-arg="[%state.items[i]%]">[%state.items[i]%]</div>
									</td>
								</text>
							</item>
						</array>
					</def>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{items: items, active: items[0]}
					<where>
						<def var="items">
							split({str: arg, sep: ";"})
						</def>
					</where>
				</calc>
			</state>
			<actions>
				<output>{down: state.items[0]}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<before>
				<output>{up: state.active}</output>
			</before>
			<state>
				{items: state.items, active: input}
			</state>
			<after>
				<output>{down: input}</output>
			</after>
		</respond>
		<accept data="data">
			<from applet="menu-item">data</from>
		</accept>
	</applet>
	<applet name="menu-item" id="id">
		<state name="state">
			<all>
				<prop name="text">
					<string/>
				</prop>
				<any>
					<prop name="up" />
					<prop name="down" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<div class="[%class%]">[%state.text%]</div>
				</text>
				<where>
					<any>
						<all>
							<is>state.up</is>
							<def var="class">
								"menu-item-inactive"
							</def>
						</all>
						<all>
							<is>state.down</is>
							<def var="class">
								"menu-item-active"
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				{text: arg, up:}
			</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="do" />
					<prop name="up" />
					<prop name="down" />
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.up</is>
								<def var="newstate">
									{text: state.text, up:}
								</def>
							</all>
							<all>
								<is>input.down</is>
								<def var="newstate">
									{text: state.text, down:}
								</def>
							</all>
							<def var="newstate">
								state
							</def>
						</any>
					</where>
				</calc>
			</state>
			<after>
				<calc>
					action
					<where>
						<any>
							<all>
								<is>input.do</is>
								<def var="action">
									<output>state.text</output>
								</def>
							</all>
							<def var="action">
								<redraw/>
							</def>
						</any>
					</where>
				</calc>
			</after>
		</respond>
		<events>
			<click>{do:}</click>
		</events>
		<accept data="data">
			<from applet="main-menu">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>data.up = state.text</is>
								<def var="input">
									{up:}
								</def>
							</all>
							<all>
								<is>data.down = state.text</is>
								<def var="input">
									{down:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</from>
		</accept>
	</applet>
</library>