<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<common>
		<def var="errors">
			<!-- function that returns HTML for a list of errors -->
			<func>
				<arg name="list">
					<array>
						<string/>
					</array>
				</arg>
				<return>
					<calc>
						errors
						<where>
							<any>
								<!-- no items - return empty string -->
								<all>
									<is>list# = 0</is>
									<def var="errors">""</def>
								</all>
								<!-- otherwise, join all strings in the list as an unordered list (HTML)-->
								<def var="errors">
									<calc>
										<text>
											<ul class="error">[%core.string.join({parts: htmllist, sep: ""})%]</ul>
										</text>
										<where>
											<def var="htmllist">
												<array>
													<size>list#</size>
													<item index="i">
														<text>
															<li>[%list[i]%]</li>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
							</any>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<unwrap>core.string</unwrap>
	</common>
	<applet name="expandable">
		<!-- an expandable panel -->
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="title">
					<string/>
				</prop>
				<prop name="classname">
					<string/>
				</prop>
				<prop name="content">
					<string/>
				</prop>
				<any>
					<prop name="collapsed" />
					<prop name="expanded" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.collapsed</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<td>
												<span class="more-icon">
													<image src="arrows1.png"/>
												</span>
											</td>
											<td>
												<span class="title">
													[%state.title%]
												</span>
											</td>
										</tr>
									</table>
								</text>
							</def>
						</all>
						<all>
							<is>state.expanded</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<td>
												<span class="more-icon">
													<image src="center15.png"/>
												</span>
											</td>
											<td>
												<span class="title">
													[%state.title%]
												</span>
											</td>
										</tr>
										<tr>
											<td></td>
											<td>
												<div class="[%state.classname%]" id="[%state.id%]-content">[%state.content%]</div>
											</td>
										</tr>
									</table>
								</text>
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init id="id" content="content">
			<state>
				<calc>
					{id: id, title: temp[0], classname: temp[1], content: temp[2], collapsed:}
					<where>
						<def var="temp">
							split({str: content, sep: "$"})
						</def>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<prop name="toggle" />
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>state.collapsed</is>
								<def var="newstate">
									{id: state.id, title: state.title, classname: state.classname, content: state.content, expanded:}
								</def>
							</all>
							<all>
								<is>state.expanded</is>
								<def var="newstate">
									{id: state.id, title: state.title, classname: state.classname, content: state.content, collapsed:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<redraw/>
			</actions>
		</respond>
		<events data="data">
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="source">
		<!-- applet that holds the source of a library -->
		<output>
			<like>{id: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="source">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<!-- invisible -->
			<invalid>
				<string/>
			</invalid>
		</content>
		<init id="id" content="source">
			<state>{id: id, source: source}</state>
			<actions>
				<!-- immediately parse source and broadcast results (XML code) -->
				<output>{id: id, code: core.xml.parseText(source)}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="newcontent">
						<string/>
					</prop>
					<prop name="send"/>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.send</is>
								<def var="newstate">state</def>
							</all>
							<def var="newstate">{id: state.id, source: input.newcontent}</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<output>{id: state.id, code: core.xml.parseText(state.source)}</output>
					<where>
						<any>
							<is>input.newcontent</is>
							<is>input.send</is>
						</any>
					</where>
				</calc>
			</actions>
		</respond>
		<events data="data">
			<change>{newcontent: data}</change>
		</events>
		<accept>
			<from applet="action" data="action-id">{send:}</from>
		</accept>
	</applet>
	<applet name="library">
		<output>
			<like>{name: "", info: core.code.analyzeApplet(core.xml.parseText(""))}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="version">
					<integer/>
				</prop>
				<any>
					<prop name="info">
						<like>core.code.analyzeLib(core.code.self)</like>
					</prop>
					<prop name="none"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					[%errors(state.info.errors)%]
					<div class="[%core.classname('expandable')%]" id="[%state.id%]-types-ver[%state.version%]">
						<h3>Types</h3>$applet-info$
						[%core.string.join({parts: types, sep: "<br/>"})%]
					</div>
					<div class="[%core.classname('expandable')%]" id="[%state.id%]-vars-ver[%state.version%]">
						<h3>Global variables</h3>$applet-info$
						[%core.string.join({parts: vars, sep: "<br/>"})%]
					</div>
					<div class="[%core.classname('expandable')%]" id="[%state.id%]-applets-ver[%state.version%]">
						<h3>Applets</h3>$applet-info$
						[%core.string.join({parts: applets, sep: "<br/>"})%]
					</div>
				</text>
				<where>
					<all>
						<def var="types">
							<array>
								<size>state.info.global.types#</size>
								<item index="i">
									<text>
										<div>[%state.info.global.types[i].name%]: [%core.code.typeStr(state.info.global.types[i].type)%]</div>
									</text>
								</item>
							</array>
						</def>
						<def var="vars">
							<array>
								<size>state.info.global.vars#</size>
								<item index="i">
									<text>
										<div>[%state.info.global.vars[i].name%]: [%core.code.typeStr(state.info.global.vars[i].type)%]</div>
									</text>
								</item>
							</array>
						</def>
						<def var="applets">
							<array>
								<size>state.info.applets#</size>
								<item index="i">
									<calc>
										<text>
											<div class="[%core.classname('expandable')%]" id="[%state.id%]-panel[%i%]-ver[%state.version%]">
												<span class="[%titleclass%]">[%state.info.applets[i].name%]</span>$
												[%core.classname('appletinfo')%]$[%state.info.applets[i].name%]
											</div>
										</text>
										<where>
											<any>
												<all>
													<is>state.info.applets[i].errors# `gt` 0</is>
													<def var="titleclass">
														"error applet-name"
													</def>
												</all>
												<def var="titleclass">
													"applet-name"
												</def>
											</any>
										</where>
									</calc>
								</item>
							</array>
						</def>
					</all>
				</where>
			</calc>
		</content>
		<init id="id" content="content">
			<!-- no content yet -->
			<state>{id: id, version: 0, none:}</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="appletname">
						<string/>
					</prop>
					<prop name="code">
						<dynamic/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.code</is>
								<def var="newstate">{id: state.id, version: state.version + 1, info: core.code.analyzeLib(input.code)}</def>
							</all>
							<def var="newstate">state</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<!-- when applet name is provided, send the applet's info -->
					<output>{name: input.appletname, info: applet}</output>
					<where>
						<def var="applet">
							<find>
								<in>state.info.applets</in>
								<item name="item">
									<is>item.name = input.appletname</is>
								</item>
							</find>
						</def>
					</where>
					<where>
						<is>input.appletname</is>
					</where>
				</calc>
				<calc>
					<!-- when library's XML code is provided, redraw content -->
					<redraw/>
					<where>
						<is>input.code</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept>
			<!-- XML code received from source -->
			<from applet="source" data="msg">
				<calc>
					{code: msg.code}
					<where>
						<all>
							<def var="libid">
								<text>[%msg.id%]-lib</text>
							</def>
							<is>state.id = libid</is>
						</all>
					</where>
				</calc>
			</from>
			<!-- info on a particular applet is requested -->
			<from applet="applet" data="name">{appletname: name}</from>
		</accept>
	</applet>
	<applet name="appletinfo">
		<output>
			<like>{name: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="name">
					<string/>
				</prop>
				<any>
					<prop name="info">
						<type name="AppletInfo"/>
					</prop>
					<prop name="noinfo"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.info</is>
							<def var="content">
								<text>
									[%errors(state.info.errors)%]
									<ul>
										<li>output: [%core.code.typeStr(state.info.output.type)%]</li>
										<li>state([%state.info.state.name%]): [%core.code.typeStr(state.info.state.type)%]</li>
										<li>content: [%errors(state.info.content.errors)%]</li>
										<li>init: 
											<p>state type: [%core.code.typeStr(state.info.init.state.type)%]</p>
											[%errors(state.info.init.state.errors)%]
											<p>actions: [%state.info.init.actions#%]</p>
										</li>
										<li>respond: 
											<p>input([%state.info.respond.input.name%]): [%core.code.typeStr(state.info.respond.input.type)%] </p>
											[%errors(state.info.respond.input.errors)%]
											<p>state type: [%core.code.typeStr(state.info.respond.state.type)%]</p>
											<p>actions: [%state.info.respond.actions#%]</p>
										</li>
									</ul>
								</text>
							</def>
						</all>
						<def var="content">""</def>
					</any>
				</where>
			</calc>
		</content>
		<init id="id" content="text">
			<state>{name: trim(text), noinfo:}</state>
			<actions>
				<output>state.name</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="refresh" />
					<prop name="info">
						<type name ="AppletInfo"/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.refresh</is>
								<def var="newstate">
									state
								</def>
							</all>
							<def var="newstate">{name: state.name, info: input.info}</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<redraw/>
			</actions>
		</respond>
		<accept>
			<from applet="library" data="data">
				<calc>
					{info: data.info}
					<where>
						<is>data.name = state.name</is>
					</where>
				</calc>
			</from>
			<from applet="action" data="action">
				<calc>
					{refresh:}
					<where>
						<is>action = "submit"</is>
					</where>
				</calc>
			</from>
		</accept>
	</applet>
	<applet name="action">
		<output>
			<string/>
		</output>
		<state name="state">
			<string/>
		</state>
		<content>
			<invalid>
				<string/>
			</invalid>
		</content>
		<init id="id" content="text">
			<state>{id: id}</state>
		</init>
		<respond>
			<input name="do">
				<prop name="do"/>
			</input>
			<state>state</state>
			<actions>
				<output>state.id</output>
			</actions>
		</respond>
		<events>
			<click>{do:}</click>
		</events>
	</applet>
<!-- 	<applet name="expression">
		<state name="state">
			
		</state>
		<content>
			
		</content>
		<init id="id" content="content">
			<state>
				
			</state>
			<actions>
				
			</actions>
		</init>
		<respond>
			<input name="input">
				
			</input>
			<state>
				
			</state>
			<actions>
				
			</actions>
		</respond>
	</applet>
 --></library>
