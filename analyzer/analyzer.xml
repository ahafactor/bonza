<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<typedef name="Type">
		<any>
			<prop name="none" />
			<prop name="integer" />
			<prop name="number" />
			<prop name="string" />
			<prop name="time" />
			<prop name="interval" />
			<prop name="action" />
			<prop name="array">
				<dynamic/>
			</prop>
			<prop name="dictionary">
				<dynamic/>
			</prop>
			<prop name="prop">
				<all>
					<prop name="name">
						<string/>
					</prop>
					<prop name="type">
						<dynamic/>
					</prop>
				</all>
			</prop>
			<prop name="all">
				<array>
					<dynamic/>
				</array>
			</prop>
			<prop name="any">
				<array>
					<dynamic/>
				</array>
			</prop>
			<prop name="func">
				<all>
					<prop name="arg">
						<dynamic/>
					</prop>
					<prop name="return">
						<dynamic/>
					</prop>
				</all>
			</prop>
			<prop name="dynamic" />
		</any>
	</typedef>
	<typedef name="ExprInfo">
		<all>
			<prop name="errors">
				<array>
					<string/>
				</array>
			</prop>
			<prop name="type">
				<type name="Type"/>
			</prop>
			<any>
				<prop name="formula">
					<string/>
				</prop>
				<prop name="invalid" />
				<prop name="text">
					<string/>
				</prop>
				<prop name="other" />
			</any>
		</all>
	</typedef>
	<common>
		<def var="errors">
			<!-- function that returns HTML for a list of errors -->
			<func>
				<arg name="list">
					<array>
						<string/>
					</array>
				</arg>
				<return>
					<calc>
						errors
						<where>
							<any>
								<!-- no items - return empty string -->
								<all>
									<is>list# = 0</is>
									<def var="errors">""</def>
								</all>
								<!-- otherwise, join all strings in the list as an unordered list (HTML)-->
								<def var="errors">
									<calc>
										<text>
											<ul class="error">[%core.string.join({parts: htmllist, sep: ""})%]</ul>
										</text>
										<where>
											<def var="htmllist">
												<array>
													<size>list#</size>
													<item index="i">
														<text>
															<li>[%list[i]%]</li>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
							</any>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<unwrap>core.string</unwrap>
	</common>
	<applet name="analyzer">
		<state name="state">
			<all>
				<prop name="source">
					<string/>
				</prop>				
				<prop name="count">
					<integer/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<textarea class="[%core.classname('source')%]" id="[%id('source')%]" rows="20" cols="120"><br/></textarea>
				<br/>
				<button class="[%core.classname('action')%]" id="[%id('submit')%]" data-arg="Analyze">Analyze</button>
				<br/>
				<div class="[%core.classname('library')%]" id="[%id('library')%]" data-arg="[%id('library')%]">Paste Bonza source in text field and press Analyze</div>
			</text>
		</content>
		<init>
			<state>
				{source: ""}
			</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<!-- source received -->
					<prop name="source">
						<string/>
					</prop>
					<!-- request to analyze library -->
					<prop name="analyze"/>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.source</is>
								<def var="newstate">
									{source: input.source}
								</def>
							</all>
							<def var="newstate">
								state
							</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<output>
						{id: id('library'), info: core.code.analyzeLib(core.xml.parseText(state.source))}
					</output>
					<where>
						<is>input.analyze</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept sender="sender" data="data">
			<from applet="source">
				<calc>
					{source: data}
					<where>
						<is>sender = id('source')</is>
					</where>
				</calc>
			</from>
			<from applet="action">
				<calc>
					{analyze:}
					<where>
						<is>sender = id('submit')</is>						
					</where>
				</calc>
			</from>
		</accept>
	</applet>
	<applet name="expandable">
		<!-- an expandable panel -->
		<state name="state">
			<all>
				<prop name="title">
					<string/>
				</prop>
				<prop name="appname">
					<string/>
				</prop>
				<prop name="content">
					<string/>
				</prop>
				<any>
					<prop name="collapsed" />
					<prop name="expanded" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.collapsed</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<image src="plus.png"/>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
									</table>
								</text>
							</def>
						</all>
						<all>
							<is>state.expanded</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<image src="minus.png"/>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
										<tr>
											<td></td>
											<td>
												<div class="[%core.classname(state.appname)%]" id="[%id('content')%]" data-arg="[%state.content%]">?</div>
											</td>
										</tr>
									</table>
								</text>
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{title: trim(title), appname: trim(appname), content: trim(rest2), collapsed:}
					<where>
						<all>
							<def var="pos1">
								indexOf({str: arg, substr: "$"})
							</def>
							<def var="title">
								substr({str: arg, start: 0, end: pos1})
							</def>
							<def var="rest1">
								substr({str: arg, start: pos1 + 1, end: length(arg)})
							</def>
							<def var="pos2">
								indexOf({str: rest1, substr: "$"})
							</def>
							<def var="appname">
								substr({str: rest1, start: 0, end: pos2})
							</def>
							<def var="rest2">
								substr({str: rest1, start: pos2 + 1, end: length(rest1)})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<prop name="toggle" />
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>state.collapsed</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, content: state.content, expanded:}
								</def>
							</all>
							<all>
								<is>state.expanded</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, content: state.content, collapsed:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<redraw/>
			</actions>
		</respond>
		<events>
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="source">
		<!-- applet that passes the source of a library (is attached to a text editor) -->
		<output>
			<string/>
		</output>
		<state name="state">
			<string/>
		</state>
		<content>
			state
		</content>
		<init arg="source">
			<state>source</state>
		</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<state>
				input
			</state>
			<actions>
				<output>state</output>
			</actions>
		</respond>
		<events data="data">
			<change>data</change>
		</events>
	</applet>
	<applet name="library">
		<output>
			<like>{name: "", info: core.code.analyzeApplet(core.xml.parseText(""))}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<any>
					<prop name="info">
						<like>core.code.analyzeLib(core.code.self)</like>
					</prop>
					<prop name="none"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table>
						<tr>
							<td><h2>Library analysis results:</h2></td>
						</tr>
						<tr>
							<td>[%errors(state.info.errors)%]</td>
						</tr>
						<tr>
							<td class="[%core.classname('expandable')%]" id="[%id('types')%]" data-arg="Types$text$[%core.string.join({parts: types, sep: ''})%]">
							</td>
						</tr>
<!--						<tr>
							<td class="[%core.classname('expandable')%]" id="[%id('vars')%]" data-arg="<h3>Global variables</h3>$text$[%core.string.join({parts: vars, sep: '<br/>'})%]">
							</td>
						</tr>
						<tr>
							<td class="[%core.classname('expandable')%]" id="[%id('applets')%]" data-arg="<h3>Applets</h3>$text$[%core.string.join({parts: applets, sep: '<br/>'})%]">
							</td>
						</tr>
					-->					</table>
				</text>
				<where>
					<all>
						<is>state.info</is>
						<def var="types">
							<array>
								<size>state.info.global.types#</size>
								<item index="i">
									<text>
										<div class="[%core.classname('expandable')%]" id="[%id('type')%]-[%i%]">
											[%state.info.global.types[i].name%]$text$
											[%core.code.typeStr(state.info.global.types[i].type)%]
										</div>
									</text>
								</item>
							</array>
						</def>
						<def var="vars">
							<array>
								<size>state.info.global.vars#</size>
								<item index="i">
									<text>
										<div class="[%core.classname('expandable')%]" id="[%id('var')%]-[%i%]">
											[%state.info.global.vars[i].name%]$text$
											[%core.code.typeStr(state.info.global.vars[i].type)%]
										</div>
									</text>
								</item>
							</array>
						</def>
						<def var="applets">
							<array>
								<size>state.info.applets#</size>
								<item index="i">
									<calc>
										<text>
											<div class="[%core.classname('expandable')%]" id="[%id('applet')%]-[%i%]">
												<span class="[%titleclass%]">[%state.info.applets[i].name%]</span>$
												appletinfo$[%state.info.applets[i].name%]
											</div>
										</text>
										<where>
											<any>
												<all>
													<is>state.info.applets[i].errors# 'gt' 0</is>
													<def var="titleclass">
														"error applet-name"
													</def>
												</all>
												<def var="titleclass">
													"applet-name"
												</def>
											</any>
										</where>
									</calc>
								</item>
							</array>
						</def>
					</all>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<!-- no content yet -->
			<state>{id: trim(arg), none:}</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="appletname">
						<string/>
					</prop>
					<prop name="info">
						<dynamic/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.info</is>
								<def var="newstate">{id: state.id, info: input.info}</def>
							</all>
							<def var="newstate">state</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<!-- when applet name is provided, send the applet's info -->
					<output>{name: input.appletname, info: applet}</output>
					<where>
						<is>input.appletname</is>
						<def var="applet">
							<find>
								<in>state.info.applets</in>
								<item name="item">
									<is>item.name = input.appletname</is>
								</item>
							</find>
						</def>
					</where>
					<where>
						<is>input.appletname</is>
					</where>
				</calc>
				<calc>
					<!-- when library's info is provided, redraw content -->
					<redraw/>
					<where>
						<is>input.info</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept sender="sender" data="data">
			<from applet="analyzer">
				<!-- library info received from analyzer -->
				<calc>
					{info: data.info}
					<where>
						<is>state.id = data.id</is>
					</where>
				</calc>
			</from>
			<!-- info on a particular applet is requested -->
			<from applet="appletinfo">
				{appletname: data.appletname}
			</from>
		</accept>
	</applet>
	<applet name="appletinfo">
		<output>
			<like>{name: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="name">
					<string/>
				</prop>
				<any>
					<all>
						<prop name="info">
							<type name="AppletInfo"/>
						</prop>
						<prop name="exprinfo">
							<dictionary>
								<type name="ExprInfo"/>
							</dictionary>
						</prop>
					</all>
					<prop name="noinfo"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.info</is>
							<def var="content">
								<text>
									[%errors(state.info.errors)%]
									<ul>
										<li>output: [%core.code.typeStr(state.info.output.type)%]</li>
										<li>state([%state.info.state.name%]): [%core.code.typeStr(state.info.state.type)%]</li>
										<li><br/> 
										<div id="[%id('content')%]" class="[%core.classname('expandable')%]">
											content $ expression $[%id("content")%]
										</div>
									</li>
									<li>init:
										<div id="[%id('initstate')%]" class="[%core.classname('expandable')%]">
											state $ expression $[%id('initstate')%]
										</div>
										<p>actions: [%state.info.init.actions#%]</p>
										[%join({parts: initactions, sep: "<br/>"})%]
									</li>
									<li>respond: 
										<p>input([%state.info.respond.input.name%]): [%core.code.typeStr(state.info.respond.input.type)%] </p>
										[%errors(state.info.respond.input.errors)%]
										<p>actions: [%state.info.respond.actions#%]</p>
									</li>
								</ul>
							</text>
						</def>
					</all>
					<def var="content">""</def>
				</any>
			</where>
			<where>
				<all>
					<def var="initactions">
						<array>
							<size>state.info.init.actions#</size>
							<item index="i">
								<text>
									<div id="[%id('initaction')%]-[%i%]" class="[%core.classname('expandable')%]">
										action #[%i + 1%]$ expression $[%id('initaction')%]-[%i%]
									</div>
								</text>
							</item>
						</array>
					</def>
				</all>
			</where>
		</calc>
	</content>
	<init arg="name">
		<state>{name: name, noinfo:}</state>
		<actions>
			<output>{appletname: name}</output>
		</actions>
	</init>
	<respond>
		<input name="input">
			<any>
				<prop name="refresh" />
				<prop name="info">
					<type name ="AppletInfo"/>
				</prop>
				<prop name="exprid">
					<string/>
				</prop>
			</any>
		</input>
		<state>
			<calc>
				newstate
				<where>
					<any>
						<def var="newstate">
							<calc>
								{name: state.name, info: input.info, exprinfo: exprinfo}
								<where>
									<def var="exprinfo">
										<merge>
											<entries>
												<entry>
													id("content")
													<value>input.info.content</value>
												</entry>
												<entry>
													id("initstate")
													<value>input.info.init.state</value>
												</entry>
											</entries>
											<dictionary>
												<size>input.info.init.actions#</size>
												<entry index="i">
													<text>[%id("initaction")%]-[%i%]</text>
													<value>input.info.init.actions[i]</value>
												</entry>
											</dictionary>
										</merge>
									</def>
								</where>
							</calc>
						</def>
						<def var="newstate">state</def>
					</any>
				</where>
			</calc>
		</state>
		<actions>
			<output>{reply: {id: input.exprid, info: state.exprinfo@(input.exprid)}}</output>
			<calc>
				<redraw/>
				<where>
					<any>
						<is>input.refresh</is>
						<is>input.info</is>
					</any>						
				</where>
			</calc>
		</actions>
	</respond>
	<accept sender="sender" data="data">
		<from applet="library">
			<calc>
				{info: data.info}
				<where>
					<is>data.name = state.name</is>
				</where>
			</calc>
		</from>
		<from applet="action">
			<calc>
				{refresh:}
				<where>
					<is>sender = id("submit")</is>
				</where>
			</calc>
		</from>
		<from applet="expression">
			{exprid: sender}
		</from>
	</accept>
</applet>
<applet name="action">
	<output>
		<prop name="do"/>
	</output>
	<state name="state">
		<string/>
	</state>
	<content>
		state
	</content>
	<init arg="arg">
		<state>arg</state>
	</init>
	<respond>
		<input name="do">
			<prop name="do"/>
		</input>
		<state>state</state>
		<actions>
			<output>{do:}</output>
		</actions>
	</respond>
	<events>
		<click>{do:}</click>
	</events>
</applet>
<applet name="expression">
	<output>
		<all>
			<prop name="id">
				<string/>
			</prop>
			<prop name="info">
				<type name="ExprInfo"/>
			</prop>
		</all>
	</output>
	<state name="state">
		<all>
			<prop name="id">
				<string/>
			</prop>
			<any>
				<prop name="noinfo" />
				<all>
					<prop name="info">
						<type name="ExprInfo"/>
					</prop>
					<prop name="subexpr">
						<dictionary>
							<type name="ExprInfo"/>
						</dictionary>
					</prop>
				</all>
			</any>
		</all>
	</state>
	<content>
		<calc>
			content
				<!-- <text>
					[%errors(state.info.errors)%]
					[%content%]<br/>
					type: [%core.code.typeStr(state.info.type)%]
				</text> -->
				<where>
					<any>
						<all>
							<is>state.info</is>
							<any>
								<def var="content">
									<text>
										formula:
										<code>[%state.info.formula%]</code>
									</text>
								</def>
								<def var="content">
									<text>
										<div id="[%id('text')%]" class="[%core.classname('expandable')%]">
											text $ text $<code>"[%state.info.text%]"</code>
										</div>
									</text>
								</def>
								<def var="content">
									<calc>
										<text>
											list:
											[%join({parts: items, sep: ""})%]
										</text>
										<where>
											<def var="items">
												<array>
													<size>state.info.list#</size>
													<item index="i">
														<text>
															<div id="[%id('listitem')%]-[%i%]" class="[%core.classname('expandable')%]">
																item #[%i + 1%] $ expression $[%id('listitem')%]-[%i%]
															</div>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
								<def var="content">
									<calc>
										"redraw"
										<where>
											<is>state.info.redraw</is>
										</where>
									</calc>
								</def>
								<def var="content">
									<calc>
										<text>
											invalid [%core.code.typeStr(state.info.type)%]
										</text>
										<where>
											<is>state.info.invalid</is>
										</where>
									</calc>
								</def>
								<def var="content">
									"***other***"
								</def>
							</any>
						</all>
						<def var="content">
							""
						</def>
					</any>
				</where>
			</calc>
		</content>
		<init arg="exprid">
			<state>
				{id: exprid, noinfo:}
			</state>
			<actions>
				<output>{request: exprid}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="exprinfo">
						<type name="ExprInfo"/>
					</prop>
					<prop name="exprid">
						<string/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<!-- received expression info ? -->
							<all>
								<is>input.exprinfo</is>
								<def var="newstate">
									<calc>
										{id: state.id, info: input.exprinfo, subexpr: subexpr}
										<where>
											<any>
												<all>
													<!-- is expression a list ? -->
													<is>input.exprinfo.list</is>
													<def var="subexpr">
														<dictionary>
															<size>input.exprinfo.list#</size>
															<entry index="i">
																<text>[%id('listitem')%]-[%i%]</text>
																<value>input.exprinfo.list[i]</value>
															</entry>
														</dictionary>
													</def>
												</all>
												<def var="subexpr">
													<noentries>
														<type name="ExprInfo"/>
													</noentries>
												</def>
											</any>
										</where>
									</calc>
								</def>
							</all>
							<!-- otherwise, no state change -->
							<def var="newstate">
								state
							</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<output>
						{reply: {id: input.exprid, info: state.subexpr@(input.exprid)}}
					</output>
					<where>
						<is>input.exprid</is>
					</where>
				</calc>
				<calc>
					<redraw/>
					<where>
						<is>input.exprinfo</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept sender="sender" data="data">
			<from applet="appletinfo">
				<calc>
					{exprinfo: data.reply.info}
					<where>
						<is>data.reply.id = state.id</is>
					</where>
				</calc>
			</from>
			<from applet="expression">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>data.reply.id = state.id</is>
								<def var="input">
									{exprinfo: data.reply.info}
								</def>
							</all>
							<all>
								<is>state.subexpr@(data.request)</is>
								<def var="input">
									{exprid: data.request}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</from>
		</accept>
	</applet>
	<applet name="text">
		<!-- represents static text -->
		<state name="state">
			<string/>
		</state>
		<content>
			state
		</content>
		<init arg="content">
			<state>
				content
			</state>
		</init>
	</applet>
</library>
