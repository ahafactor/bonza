<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<typedef name="Type">
		<any>
			<prop name="none" />
			<prop name="integer" />
			<prop name="number" />
			<prop name="string" />
			<prop name="time" />
			<prop name="interval" />
			<prop name="action" />
			<prop name="array">
				<dynamic/>
			</prop>
			<prop name="dictionary">
				<dynamic/>
			</prop>
			<prop name="prop">
				<all>
					<prop name="name">
						<string/>
					</prop>
					<prop name="type">
						<dynamic/>
					</prop>
				</all>
			</prop>
			<prop name="all">
				<array>
					<dynamic/>
				</array>
			</prop>
			<prop name="any">
				<array>
					<dynamic/>
				</array>
			</prop>
			<prop name="func">
				<all>
					<prop name="arg">
						<dynamic/>
					</prop>
					<prop name="return">
						<dynamic/>
					</prop>
				</all>
			</prop>
			<prop name="dynamic" />
		</any>
	</typedef>
	<typedef name="ExprInfo">
		<all>
			<prop name="errors">
				<array>
					<string/>
				</array>
			</prop>
			<prop name="type">
				<type name="Type"/>
			</prop>
			<any>
				<prop name="formula">
					<string/>
				</prop>
				<prop name="invalid" />
				<prop name="text">
					<string/>
				</prop>
				<prop name="other" />
			</any>
		</all>
	</typedef>
	<common>
		<def var="errors">
			<!-- function that returns HTML for a list of errors -->
			<func>
				<arg name="list">
					<array>
						<string/>
					</array>
				</arg>
				<return>
					<calc>
						errors
						<where>
							<any>
								<!-- no items - return empty string -->
								<all>
									<is>list# = 0</is>
									<def var="errors">""</def>
								</all>
								<!-- otherwise, join all strings in the list as an unordered list (HTML)-->
								<def var="errors">
									<calc>
										<text>
											<ul class="error">[%core.string.join({parts: htmllist, sep: ""})%]</ul>
										</text>
										<where>
											<def var="htmllist">
												<array>
													<size>list#</size>
													<item index="i">
														<text>
															<li>[%list[i]%]</li>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
							</any>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<def var="subexpr">
			<!-- function that returns the dictionary of subexpressions of an expression -->
			<func>
				<arg name="arg">
					<type name="ExprInfo"/>
				</arg>
				<return>
					<calc>
						d
						<where>
							<any>
								<all>
									<is>arg.list</is>
									<def var="d">
										<dictionary>
											<size>arg.list#</size>
											<entry index="i">
												<text>listitem[%i%]</text>
												<value>arg.list[i]</value>
											</entry>
										</dictionary>
									</def>
								</all>
								<def var="d">
									<noentries>
										<type name="ExprInfo"/>
									</noentries>
								</def>
							</any>
						</where>
					</calc>
				</return>
			</func>
		</def>
		<unwrap>core.string</unwrap>
	</common>
	<applet name="expandable">
		<!-- an expandable panel -->
		<state name="state">
			<all>
				<prop name="title">
					<string/>
				</prop>
				<prop name="appname">
					<string/>
				</prop>
				<prop name="content">
					<string/>
				</prop>
				<any>
					<prop name="collapsed" />
					<prop name="expanded" />
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.collapsed</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<image src="plus.png"/>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
									</table>
								</text>
							</def>
						</all>
						<all>
							<is>state.expanded</is>
							<def var="content">
								<text>
									<table class="expandable">
										<tr>
											<th>
												<image src="minus.png"/>
											</th>
											<th class="panel-title">
												[%state.title%]
											</th>
										</tr>
										<tr>
											<td></td>
											<td>
												<div class="[%core.classname(state.appname)%]" id="[%id('content')%]" hidden="hidden">[%state.content%]</div>
											</td>
										</tr>
									</table>
								</text>
							</def>
						</all>
					</any>
				</where>
			</calc>
		</content>
		<init content="content">
			<state>
				<calc>
					{title: trim(title), appname: trim(appname), content: trim(rest2), collapsed:}
					<where>
						<all>
							<def var="pos1">
								indexOf({str: content, substr: "$"})
							</def>
							<def var="title">
								substr({str: content, start: 0, end: pos1})
							</def>
							<def var="rest1">
								substr({str: content, start: pos1 + 1, end: length(content)})
							</def>
							<def var="pos2">
								indexOf({str: rest1, substr: "$"})
							</def>
							<def var="appname">
								substr({str: rest1, start: 0, end: pos2})
							</def>
							<def var="rest2">
								substr({str: rest1, start: pos2 + 1, end: length(rest1)})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<prop name="toggle" />
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>state.collapsed</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, content: state.content, expanded:}
								</def>
							</all>
							<all>
								<is>state.expanded</is>
								<def var="newstate">
									{title: state.title, appname: state.appname, content: state.content, collapsed:}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<redraw/>
			</actions>
		</respond>
		<events data="data">
			<click>{toggle:}</click>
		</events>
	</applet>
	<applet name="source">
		<!-- applet that holds the source of a library -->
		<output>
			<like>{code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="source">
					<string/>
				</prop>
			</all>
		</state>
		<content>
			<!-- invisible -->
			<invalid>
				<string/>
			</invalid>
		</content>
		<init content="source">
			<state>{source: source}</state>
			<actions>
				<!-- immediately parse source and broadcast results (XML code) -->
				<output>{code: core.xml.parseText(source)}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="newcontent">
						<string/>
					</prop>
					<prop name="send"/>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.send</is>
								<def var="newstate">state</def>
							</all>
							<def var="newstate">{source: input.newcontent}</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<output>{id: id(""), code: core.xml.parseText(state.source)}</output>
					<where>
						<any>
							<is>input.newcontent</is>
							<is>input.send</is>
						</any>
					</where>
				</calc>
			</actions>
		</respond>
		<events data="data">
			<change>{newcontent: data}</change>
		</events>
		<accept>
			<from applet="action" data="action-id">{send:}</from>
		</accept>
	</applet>
	<applet name="library">
		<output>
			<like>{name: "", info: core.code.analyzeApplet(core.xml.parseText(""))}</like>
		</output>
		<state name="state">
			<all>
				<any>
					<prop name="info">
						<like>core.code.analyzeLib(core.code.self)</like>
					</prop>
					<prop name="none"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<table class="analyzer-library">
						<tr>
							<td><h2>Library analysis results:</h2></td>
						</tr>
						<tr>
							<td>[%errors(state.info.errors)%]</td>
						</tr>
						<tr>
							<td class="[%core.classname('expandable')%]" id="id('types')">
								<h3>Types</h3>$text$
								[%core.string.join({parts: types, sep: "<br/>"})%]
							</td>
						</tr>
						<tr>
							<td class="[%core.classname('expandable')%]" id="id('vars')">
								<h3>Global variables</h3>$text$
								[%core.string.join({parts: vars, sep: "<br/>"})%]
							</td>
						</tr>
						<tr>
							<td class="[%core.classname('expandable')%]" id="id('applets')">
								<h3>Applets</h3>$text$
								[%core.string.join({parts: applets, sep: "<br/>"})%]
							</td>
						</tr>
					</table>
				</text>
				<where>
					<all>
						<def var="types">
							<array>
								<size>state.info.global.types#</size>
								<item index="i">
									<text>
										<div class="[%core.classname('expandable')%]" id="[%id('type')%]-[%i%]">
											[%state.info.global.types[i].name%]$text$
											[%core.code.typeStr(state.info.global.types[i].type)%]
										</div>
									</text>
								</item>
							</array>
						</def>
						<def var="vars">
							<array>
								<size>state.info.global.vars#</size>
								<item index="i">
									<text>
										<div class="[%core.classname('expandable')%]" id="[%id('var')%]-[%i%]">
											[%state.info.global.vars[i].name%]$text$
											[%core.code.typeStr(state.info.global.vars[i].type)%]
										</div>
									</text>
								</item>
							</array>
						</def>
						<def var="applets">
							<array>
								<size>state.info.applets#</size>
								<item index="i">
									<calc>
										<text>
											<div class="[%core.classname('expandable')%]" id="[%id('applet')%]-[%i%]">
												<span class="[%titleclass%]">[%state.info.applets[i].name%]</span>$
												appletinfo$[%state.info.applets[i].name%]
											</div>
										</text>
										<where>
											<any>
												<all>
													<is>state.info.applets[i].errors# 'gt' 0</is>
													<def var="titleclass">
														"error applet-name"
													</def>
												</all>
												<def var="titleclass">
													"applet-name"
												</def>
											</any>
										</where>
									</calc>
								</item>
							</array>
						</def>
					</all>
				</where>
			</calc>
		</content>
		<init content="content">
			<!-- no content yet -->
			<state>{version: 0, none:}</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="appletname">
						<string/>
					</prop>
					<prop name="code">
						<dynamic/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.code</is>
								<def var="newstate">{version: state.version + 1, info: core.code.analyzeLib(input.code)}</def>
							</all>
							<def var="newstate">state</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<!-- when applet name is provided, send the applet's info -->
					<output>{name: input.appletname, info: applet}</output>
					<where>
						<def var="applet">
							<find>
								<in>state.info.applets</in>
								<item name="item">
									<is>item.name = input.appletname</is>
								</item>
							</find>
						</def>
					</where>
					<where>
						<is>input.appletname</is>
					</where>
				</calc>
				<calc>
					<!-- when library's XML code is provided, redraw content -->
					<redraw/>
					<where>
						<is>input.code</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept>
			<!-- XML code received from source -->
			<from applet="source" data="msg">
				<calc>
					{code: msg.code}
<!-- 					<where>
						<all>
							<def var="libid">
								<text>[%msg.id%]-lib</text>
							</def>
							<is>state.id = libid</is>
						</all>
					</where>
 -->				</calc>
			</from>
			<!-- info on a particular applet is requested -->
			<from applet="appletinfo" data="data">{appletname: data.appletname}</from>
		</accept>
	</applet>
	<applet name="appletinfo">
		<output>
			<like>{name: "", code: core.xml.parseText("")}</like>
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="name">
					<string/>
				</prop>
				<any>
					<all>
						<prop name="info">
							<type name="AppletInfo"/>
						</prop>
						<prop name="exprinfo">
							<dictionary>
								<type name="ExprInfo"/>
							</dictionary>
						</prop>
					</all>
					<prop name="noinfo"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<where>
					<any>
						<all>
							<is>state.info</is>
							<def var="content">
								<text>
									[%errors(state.info.errors)%]
									<ul>
										<li>output: [%core.code.typeStr(state.info.output.type)%]</li>
										<li>state([%state.info.state.name%]): [%core.code.typeStr(state.info.state.type)%]</li>
										<li><br/> 
											<div id="[%id('content')%]" class="[%core.classname('expandable')%]">
												content $ expression $[%id("content")%]
											</div>
										</li>
										<li>init:
											<div id="[%id('initstate')%]" class="[%core.classname('expandable')%]">
												state $ expression $[%id('initstate')%]
											</div>
											<p>actions: [%state.info.init.actions#%]</p>
											[%join({parts: initactions, sep: "<br/>"})%]
										</li>
										<li>respond: 
											<p>input([%state.info.respond.input.name%]): [%core.code.typeStr(state.info.respond.input.type)%] </p>
											[%errors(state.info.respond.input.errors)%]
											<p>actions: [%state.info.respond.actions#%]</p>
										</li>
									</ul>
								</text>
							</def>
						</all>
						<def var="content">""</def>
					</any>
				</where>
				<where>
					<all>
						<def var="initactions">
							<array>
								<size>state.info.init.actions#</size>
								<item index="i">
									<text>
										<div id="[%id('initaction')%]-[%i%]" class="[%core.classname('expandable')%]">
											action #[%i + 1%]$ expression $[%id('initaction')%]-[%i%]
										</div>
									</text>
								</item>
							</array>
						</def>
					</all>
				</where>
			</calc>
		</content>
		<init content="text">
			<state>{name: trim(text), noinfo:}</state>
			<actions>
				<output>{appletname: state.name}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="refresh" />
					<prop name="info">
						<type name ="AppletInfo"/>
					</prop>
					<prop name="exprid">
						<string/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<def var="newstate">
								<calc>
									{name: state.name, info: input.info, exprinfo: exprinfo}
									<where>
										<def var="exprinfo">
											<merge>
												<entries>
													<entry>
														id("content")
														<value>input.info.content</value>
													</entry>
													<entry>
														id("initstate")
														<value>input.info.init.state</value>
													</entry>
												</entries>
												<dictionary>
													<size>input.info.init.actions#</size>
													<entry index="i">
														<text>[%id("initaction")%]-[%i%]</text>
														<value>input.info.init.actions[i]</value>
													</entry>
												</dictionary>
											</merge>
										</def>
									</where>
								</calc>
							</def>
							<def var="newstate">state</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<output>{reply: {id: input.exprid, info: state.exprinfo@(input.exprid)}}</output>
				<calc>
					<redraw/>
					<where>
						<any>
							<is>input.refresh</is>
							<is>input.info</is>
						</any>						
					</where>
				</calc>
			</actions>
		</respond>
		<accept>
			<from applet="library" data="data">
				<calc>
					{info: data.info}
					<where>
						<is>data.name = state.name</is>
					</where>
				</calc>
			</from>
			<from applet="action" data="action">
				<calc>
					{refresh:}
					<!-- <where>
						<is>action = "submit"</is>
					</where> -->
				</calc>
			</from>
			<from applet="expression" data="data">
				{exprid: data.request}
			</from>
		</accept>
	</applet>
	<applet name="action">
		<output>
			<prop name="do"/>
		</output>
		<state name="state">
			<prop name="nil"/>
		</state>
		<content>
			<invalid>
				<string/>
			</invalid>
		</content>
		<init content="text">
			<state>{nil:}</state>
		</init>
		<respond>
			<input name="do">
				<prop name="do"/>
			</input>
			<state>state</state>
			<actions>
				<output>{do:}</output>
			</actions>
		</respond>
		<events>
			<click>{do:}</click>
		</events>
	</applet>
	<applet name="expression">
		<output>
			
		</output>
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<any>
					<prop name="noinfo" />
					<all>
						<prop name="info">
							<type name="ExprInfo"/>
						</prop>
						<prop name="subexpr">
							<dictionary>
								<type name="ExprInfo"/>
							</dictionary>
						</prop>
					</all>
				</any>
			</all>
		</state>
		<content>
			<calc>
				content
				<!-- <text>
					[%errors(state.info.errors)%]
					[%content%]<br/>
					type: [%core.code.typeStr(state.info.type)%]
				</text> -->
				<where>
					<any>
						<all>
							<is>state.info</is>
							<any>
								<def var="content">
									<text>
										formula:
										<code>[%state.info.formula%]</code>
									</text>
								</def>
								<def var="content">
									<text>
										<div id="[%id('text')%]" class="[%core.classname('expandable')%]">
											text $ text $<code>"[%state.info.text%]"</code>
										</div>
									</text>
								</def>
								<def var="content">
									<calc>
										<text>
											list:
											[%join({parts: items, sep: ""})%]
										</text>
										<where>
											<def var="items">
												<array>
													<size>state.info.list#</size>
													<item index="i">
														<text>
															<div id="[%id('listitem')%]-[%i%]" class="[%core.classname('expandable')%]">
																item #[%i + 1%] $ expression $[%id('listitem')%]-[%i%]
															</div>
														</text>
													</item>
												</array>
											</def>
										</where>
									</calc>
								</def>
								<def var="content">
									<calc>
										"redraw"
										<where>
											<is>state.info.redraw</is>
										</where>
									</calc>
								</def>
								<def var="content">
									<calc>
										<text>
											invalid [%core.code.typeStr(state.info.type)%]
										</text>
										<where>
											<is>state.info.invalid</is>
										</where>
									</calc>
								</def>
								<def var="content">
									"***other***"
								</def>
							</any>
						</all>
						<def var="content">
							""
						</def>
					</any>
				</where>
			</calc>
		</content>
		<init content="content">
			<state>
				{id: trim(content), noinfo:}
			</state>
			<actions>
				<output>{request: state.id}</output>
			</actions>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="exprinfo">
						<type name="ExprInfo"/>
					</prop>
					<prop name="exprid">
						<string/>
					</prop>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<!-- received expression info ? -->
							<all>
								<is>input.exprinfo</is>
								<def var="newstate">
									<calc>
										{id: state.id, info: input.exprinfo, subexpr: subexpr}
										<where>
											<any>
												<all>
													<!-- is expression a list ? -->
													<is>input.exprinfo.list</is>
													<def var="subexpr">
														<dictionary>
															<size>input.exprinfo.list#</size>
															<entry index="i">
																<text>[%id('listitem')%]-[%i%]</text>
																<value>input.exprinfo.list[i]</value>
															</entry>
														</dictionary>
													</def>
												</all>
												<def var="subexpr">
													<noentries>
														<type name="ExprInfo"/>
													</noentries>
												</def>
											</any>
										</where>
									</calc>
								</def>
							</all>
							<!-- otherwise, no state change -->
							<def var="newstate">
								state
							</def>
						</any>
					</where>
				</calc>
			</state>
			<actions>
				<calc>
					<output>
						{reply: {id: input.exprid, info: state.subexpr@(input.exprid)}}
					</output>
					<where>
						<is>input.exprid</is>
					</where>
				</calc>
				<calc>
					<redraw/>
					<where>
						<is>input.exprinfo</is>
					</where>
				</calc>
			</actions>
		</respond>
		<accept>
			<from applet="appletinfo" data="data">
				<calc>
					{exprinfo: data.reply.info}
					<where>
						<is>data.reply.id = state.id</is>
					</where>
				</calc>
			</from>
			<from applet="expression" data="data">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>data.reply.id = state.id</is>
								<def var="input">
									{exprinfo: data.reply.info}
								</def>
							</all>
							<all>
								<is>state.subexpr@(data.request)</is>
								<def var="input">
									{exprid: data.request}
								</def>
							</all>
						</any>
					</where>
				</calc>
			</from>
		</accept>
	</applet>
	<applet name="text">
		<state name="state">
			<string/>
		</state>
		<content>
			state
		</content>
		<init content="content">
			<state>
				content
			</state>
		</init>
<!-- 		<respond>
			<input name="input">
				
			</input>
			<state>
				state				
			</state>
		</respond>
 -->	</applet>
</library>
