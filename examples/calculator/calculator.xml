<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<!--             Calculator Demo                 -->
	<!-- Author: Roman Movchan, Melbourne, Australia -->
	<typedef name="Command">
		<any>
			<prop name="equal"/>
			<prop name="clear"/>
			<prop name="plus"/>
			<prop name="minus"/>
			<prop name="multiply"/>
			<prop name="divide"/>
			<prop name="char">
				<string/>
			</prop>
		</any>
	</typedef>
	<channel name="command">
		<string/>
	</channel>
	<channel name="display">
		<string/>
	</channel>
	<common>
		<unwrap>core</unwrap>
		<unwrap>string</unwrap>
		<unwrap>format</unwrap>
		<unwrap>math</unwrap>
		<def var="maxlen">19</def>
	</common>
	<applet name="calculator" id="id">
		<state name="state">
			<all>
				<prop name="value">
					<string/>
				</prop>
				<prop name="result">
					<number/>
				</prop>
				<prop name="command">
					<type name="Command"/>
				</prop>
				<prop name="op">
					<type name="Command"/>
				</prop>
			</all>
		</state>
		<content>
			<text>
				<table class="calculator-body">
					<tr>
						<td colspan="4">
							<div class="[%appletclass('calculator-display')%]" id="[%id%]-display"/>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-clear" data-arg="clear;C">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-divide" data-arg="divide;[%nbsp%]/[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-multiply" data-arg="multiply;[%nbsp%]x[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-minus" data-arg="minus;[%nbsp%]-[%nbsp%]">?</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-7" data-arg="7;[%nbsp%]7[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-8" data-arg="8;[%nbsp%]8[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-9" data-arg="9;[%nbsp%]9[%nbsp%]">?</div>
						</td>
						<td rowspan="2">
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-plus" data-arg="plus;[%br%][%nbsp%]+[%nbsp%][%br%]"></div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-4" data-arg="4;[%nbsp%]4[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-5" data-arg="5;[%nbsp%]5[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-6" data-arg="6;[%nbsp%]6[%nbsp%]">?</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-1" data-arg="1;[%nbsp%]1[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-2" data-arg="2;[%nbsp%]2[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-3" data-arg="3;[%nbsp%]3[%nbsp%]">?</div>
						</td>
						<td rowspan="2">
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-equal" data-arg="equal;[%br%][%nbsp%]=[%nbsp%][%br%]">?</div>
						</td>
					</tr>
					<tr>
						<td colspan="2">
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-0" data-arg="0;[%nbsp%]0[%nbsp%]">?</div>
						</td>
						<td>
							<div class="[%appletclass('calculator-button')%]" id="[%id%]-period" data-arg="period;[%nbsp%].[%nbsp%]">?</div>
						</td>
					</tr>
				</table>
			</text>
		</content>
		<init>
			<state>{ value: "0", result: 0, command: {clear:}, op: {clear:} }</state>
			<actions>
				<send channel="display">state.value</send>
			</actions>
		</init>
		<respond>
			<input name="input">
				<type name="Command"/>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.clear</is>
								<def var="newstate">{ value: "0", result: 0, command: {clear:}, op: {clear:} }</def>
							</all>
							<all>
								<is>input.char</is>
								<def var="newstate">
									<calc>
										{ value: newvalue, result: state.result, command: input, op: state.op }
										<where>
											<any>
												<all>
													<not>
														<is>state.command.char</is>
													</not>
													<def var="newvalue">input.char</def>
												</all>
												<all>
													<is>length(state.value) 'lt' maxlen</is>
													<def var="newvalue">
														<text>[%state.value%][%input.char%]</text>
													</def>
													<is>strToNum(newvalue)</is>
												</all>
												<def var="newvalue">state.value</def>
											</any>
										</where>
									</calc>
								</def>
							</all>
							<all>
								<any>
									<is>input.plus</is>
									<is>input.minus</is>
									<is>input.multiply</is>
									<is>input.divide</is>
								</any>
								<any>
									<all>
										<is>state.op.plus</is>
										<def var="result">state.result + strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.minus</is>
										<def var="result">state.result - strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.multiply</is>
										<def var="result">state.result * strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.divide</is>
										<def var="result">state.result / strToNum(state.value)</def>
									</all>
									<def var="result">strToNum(state.value)</def>
								</any>
								<def var="newstate">{ value: state.value, result: result, command: input, op: input }</def>
							</all>
							<all>
								<is>input.equal</is>
								<any>
									<all>
										<is>state.op.plus</is>
										<def var="result">state.result + strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.minus</is>
										<def var="result">state.result - strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.multiply</is>
										<def var="result">state.result * strToNum(state.value)</def>
									</all>
									<all>
										<is>state.op.divide</is>
										<def var="result">state.result / strToNum(state.value)</def>
									</all>
									<def var="result">state.result</def>
								</any>
								<def var="newstate">
									<calc>
										{ value: displayResult, result: result, command: input, op: input }
										<where>
											<any>
												<all>
													<any>
														<is>NaN(result)</is>
														<not>
															<is>finite(result)</is>
														</not>
													</any>
													<def var="displayResult">"ERROR"</def>
												</all>
												<all>
													<def var="str">numToStr(result)</def>
													<any>
														<all>
															<is>length(str) 'gt' maxlen</is>
															<def var="displayResult">formatNum({num: result, exp: 3})</def>
														</all>
														<def var="displayResult">numToStr(result)</def>
													</any>
												</all>
											</any>
										</where>
									</calc>
								</def>
							</all>
							<def var="newstate">{ value: "ERROR", result: 0, command: input, op: state.op }</def>
						</any>
					</where>
				</calc>
			</state>
			<after>
				<send channel="display">state.value</send>
			</after>
		</respond>
		<accept data="id">
			<from channel="command">
				<calc>
					input
					<where>
						<any>
							<all>
								<is>id = "clear"</is>
								<def var="input">{clear:}</def>
							</all>
							<all>
								<is>id = "equal"</is>
								<def var="input">{equal:}</def>
							</all>
							<all>
								<is>id = "plus"</is>
								<def var="input">{plus:}</def>
							</all>
							<all>
								<is>id = "minus"</is>
								<def var="input">{minus:}</def>
							</all>
							<all>
								<is>id = "multiply"</is>
								<def var="input">{multiply:}</def>
							</all>
							<all>
								<is>id = "divide"</is>
								<def var="input">{divide:}</def>
							</all>
							<all>
								<is>id = "period"</is>
								<def var="input">{char: "."}</def>
							</all>
							<def var="input">{char: id}</def>
						</any>
					</where>
				</calc>
			</from>
		</accept>
	</applet>
	<applet name="calculator-display" id="id">
		<state name="state">
			<string/>
		</state>
		<content>
			<text><div class="calculator-display">[%state%]</div></text>
		</content>
		<init>
			<state>"0"</state>
		</init>
		<respond>
			<input name="input">
				<string/>
			</input>
			<state>input</state>
			<after>
				<redraw/>
			</after>
		</respond>
		<accept data="data">
			<from channel="display">data</from>
		</accept>
	</applet>
	<applet name="calculator-button" id="id">
		<state name="state">
			<all>
				<prop name="id">
					<string/>
				</prop>
				<prop name="text">
					<string/>
				</prop>
				<any>
					<prop name="up"/>
					<prop name="down"/>
				</any>
			</all>
		</state>
		<content>
			<calc>
				<text>
					<div class="[%updown%]">[%state.text%]</div>
				</text>
				<where>
					<any>
						<all>
							<is>state.down</is>
							<def var="updown">"calculator-button-down"</def>
						</all>
						<def var="updown">"calculator-button-up"</def>
					</any>
				</where>
			</calc>
		</content>
		<init arg="arg">
			<state>
				<calc>
					{id: id, text: text, up:}
					<where>
						<all>
							<def var="pos">
								indexOf({str: arg, substr: ";"})
							</def>
							<def var="id">
								substr({str: arg, from: 0, to: {pos: pos}})
							</def>
							<def var="text">
								substr({str: arg, from: pos + 1, to: {end:}})
							</def>
						</all>
					</where>
				</calc>
			</state>
		</init>
		<respond>
			<input name="input">
				<any>
					<prop name="up"/>
					<prop name="down"/>
				</any>
			</input>
			<state>
				<calc>
					newstate
					<where>
						<any>
							<all>
								<is>input.up</is>
								<def var="newstate">{id: state.id, text: state.text, up:}</def>
							</all>
							<all>
								<is>input.down</is>
								<def var="newstate">{id: state.id, text: state.text, down:}</def>
							</all>
						</any>
					</where>
				</calc>
			</state>
			<after>
				<calc>
					<send channel="command">state.id</send>
					<where>
						<is>state.down</is>
					</where>
				</calc>
				<calc>
					action
					<where>
						<all>
							<is>state.down</is>
							<def var="action">
								<delay>
									<input>{up:}</input>
									<by>100*core.time.msec</by>
								</delay>
							</def>
						</all>
					</where>
				</calc>
				<redraw/>
			</after>
		</respond>
		<events>
			<mousedown>{down:}</mousedown>
		</events>
	</applet>
</library>
